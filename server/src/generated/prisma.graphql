# source: https://time-challenge.herokuapp.com
# timestamp: Sun Aug 26 2018 19:05:46 GMT-0700 (Pacific Daylight Time)

type AggregateChallenge {
  count: Int!
}

type AggregateChallengeGroup {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Challenge implements Node {
  id: ID!
  group(where: ChallengeGroupWhereInput): ChallengeGroup!
  challengingUser(where: UserWhereInput): User!
  challengedUser(where: UserWhereInput): User!
  description: String!
  duration: DateTime!
  startTime: DateTime!
  finishedTime: DateTime!
  active: Boolean!
  winner(where: UserWhereInput): User
}

"""A connection to a list of items."""
type ChallengeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChallengeEdge]!
  aggregate: AggregateChallenge!
}

input ChallengeCreateInput {
  description: String!
  duration: DateTime!
  startTime: DateTime!
  finishedTime: DateTime!
  active: Boolean
  group: ChallengeGroupCreateOneWithoutChallengesInput!
  challengingUser: UserCreateOneWithoutChallengerInput!
  challengedUser: UserCreateOneWithoutChallengeeInput!
  winner: UserCreateOneWithoutWinnerInput
}

input ChallengeCreateManyWithoutChallengedUserInput {
  create: [ChallengeCreateWithoutChallengedUserInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutChallengingUserInput {
  create: [ChallengeCreateWithoutChallengingUserInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutGroupInput {
  create: [ChallengeCreateWithoutGroupInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutWinnerInput {
  create: [ChallengeCreateWithoutWinnerInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateWithoutChallengedUserInput {
  description: String!
  duration: DateTime!
  startTime: DateTime!
  finishedTime: DateTime!
  active: Boolean
  group: ChallengeGroupCreateOneWithoutChallengesInput!
  challengingUser: UserCreateOneWithoutChallengerInput!
  winner: UserCreateOneWithoutWinnerInput
}

input ChallengeCreateWithoutChallengingUserInput {
  description: String!
  duration: DateTime!
  startTime: DateTime!
  finishedTime: DateTime!
  active: Boolean
  group: ChallengeGroupCreateOneWithoutChallengesInput!
  challengedUser: UserCreateOneWithoutChallengeeInput!
  winner: UserCreateOneWithoutWinnerInput
}

input ChallengeCreateWithoutGroupInput {
  description: String!
  duration: DateTime!
  startTime: DateTime!
  finishedTime: DateTime!
  active: Boolean
  challengingUser: UserCreateOneWithoutChallengerInput!
  challengedUser: UserCreateOneWithoutChallengeeInput!
  winner: UserCreateOneWithoutWinnerInput
}

input ChallengeCreateWithoutWinnerInput {
  description: String!
  duration: DateTime!
  startTime: DateTime!
  finishedTime: DateTime!
  active: Boolean
  group: ChallengeGroupCreateOneWithoutChallengesInput!
  challengingUser: UserCreateOneWithoutChallengerInput!
  challengedUser: UserCreateOneWithoutChallengeeInput!
}

"""An edge in a connection."""
type ChallengeEdge {
  """The item at the end of the edge."""
  node: Challenge!

  """A cursor for use in pagination."""
  cursor: String!
}

type ChallengeGroup implements Node {
  id: ID!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  secret: String!
  title: String!
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
}

"""A connection to a list of items."""
type ChallengeGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChallengeGroupEdge]!
  aggregate: AggregateChallengeGroup!
}

input ChallengeGroupCreateInput {
  secret: String!
  title: String!
  users: UserCreateManyWithoutChallengeGroupsInput
  challenges: ChallengeCreateManyWithoutGroupInput
}

input ChallengeGroupCreateManyWithoutUsersInput {
  create: [ChallengeGroupCreateWithoutUsersInput!]
  connect: [ChallengeGroupWhereUniqueInput!]
}

input ChallengeGroupCreateOneWithoutChallengesInput {
  create: ChallengeGroupCreateWithoutChallengesInput
  connect: ChallengeGroupWhereUniqueInput
}

input ChallengeGroupCreateWithoutChallengesInput {
  secret: String!
  title: String!
  users: UserCreateManyWithoutChallengeGroupsInput
}

input ChallengeGroupCreateWithoutUsersInput {
  secret: String!
  title: String!
  challenges: ChallengeCreateManyWithoutGroupInput
}

"""An edge in a connection."""
type ChallengeGroupEdge {
  """The item at the end of the edge."""
  node: ChallengeGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChallengeGroupOrderByInput {
  id_ASC
  id_DESC
  secret_ASC
  secret_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChallengeGroupPreviousValues {
  id: ID!
  secret: String!
  title: String!
}

type ChallengeGroupSubscriptionPayload {
  mutation: MutationType!
  node: ChallengeGroup
  updatedFields: [String!]
  previousValues: ChallengeGroupPreviousValues
}

input ChallengeGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeGroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChallengeGroupWhereInput
}

input ChallengeGroupUpdateInput {
  secret: String
  title: String
  users: UserUpdateManyWithoutChallengeGroupsInput
  challenges: ChallengeUpdateManyWithoutGroupInput
}

input ChallengeGroupUpdateManyWithoutUsersInput {
  create: [ChallengeGroupCreateWithoutUsersInput!]
  connect: [ChallengeGroupWhereUniqueInput!]
  disconnect: [ChallengeGroupWhereUniqueInput!]
  delete: [ChallengeGroupWhereUniqueInput!]
  update: [ChallengeGroupUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [ChallengeGroupUpsertWithWhereUniqueWithoutUsersInput!]
}

input ChallengeGroupUpdateOneWithoutChallengesInput {
  create: ChallengeGroupCreateWithoutChallengesInput
  connect: ChallengeGroupWhereUniqueInput
  delete: Boolean
  update: ChallengeGroupUpdateWithoutChallengesDataInput
  upsert: ChallengeGroupUpsertWithoutChallengesInput
}

input ChallengeGroupUpdateWithoutChallengesDataInput {
  secret: String
  title: String
  users: UserUpdateManyWithoutChallengeGroupsInput
}

input ChallengeGroupUpdateWithoutUsersDataInput {
  secret: String
  title: String
  challenges: ChallengeUpdateManyWithoutGroupInput
}

input ChallengeGroupUpdateWithWhereUniqueWithoutUsersInput {
  where: ChallengeGroupWhereUniqueInput!
  data: ChallengeGroupUpdateWithoutUsersDataInput!
}

input ChallengeGroupUpsertWithoutChallengesInput {
  update: ChallengeGroupUpdateWithoutChallengesDataInput!
  create: ChallengeGroupCreateWithoutChallengesInput!
}

input ChallengeGroupUpsertWithWhereUniqueWithoutUsersInput {
  where: ChallengeGroupWhereUniqueInput!
  update: ChallengeGroupUpdateWithoutUsersDataInput!
  create: ChallengeGroupCreateWithoutUsersInput!
}

input ChallengeGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeGroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  secret: String

  """All values that are not equal to given value."""
  secret_not: String

  """All values that are contained in given list."""
  secret_in: [String!]

  """All values that are not contained in given list."""
  secret_not_in: [String!]

  """All values less than the given value."""
  secret_lt: String

  """All values less than or equal the given value."""
  secret_lte: String

  """All values greater than the given value."""
  secret_gt: String

  """All values greater than or equal the given value."""
  secret_gte: String

  """All values containing the given string."""
  secret_contains: String

  """All values not containing the given string."""
  secret_not_contains: String

  """All values starting with the given string."""
  secret_starts_with: String

  """All values not starting with the given string."""
  secret_not_starts_with: String

  """All values ending with the given string."""
  secret_ends_with: String

  """All values not ending with the given string."""
  secret_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  challenges_every: ChallengeWhereInput
  challenges_some: ChallengeWhereInput
  challenges_none: ChallengeWhereInput
}

input ChallengeGroupWhereUniqueInput {
  id: ID
}

enum ChallengeOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  duration_ASC
  duration_DESC
  startTime_ASC
  startTime_DESC
  finishedTime_ASC
  finishedTime_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChallengePreviousValues {
  id: ID!
  description: String!
  duration: DateTime!
  startTime: DateTime!
  finishedTime: DateTime!
  active: Boolean!
}

type ChallengeSubscriptionPayload {
  mutation: MutationType!
  node: Challenge
  updatedFields: [String!]
  previousValues: ChallengePreviousValues
}

input ChallengeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChallengeWhereInput
}

input ChallengeUpdateInput {
  description: String
  duration: DateTime
  startTime: DateTime
  finishedTime: DateTime
  active: Boolean
  group: ChallengeGroupUpdateOneWithoutChallengesInput
  challengingUser: UserUpdateOneWithoutChallengerInput
  challengedUser: UserUpdateOneWithoutChallengeeInput
  winner: UserUpdateOneWithoutWinnerInput
}

input ChallengeUpdateManyWithoutChallengedUserInput {
  create: [ChallengeCreateWithoutChallengedUserInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutChallengedUserInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutChallengedUserInput!]
}

input ChallengeUpdateManyWithoutChallengingUserInput {
  create: [ChallengeCreateWithoutChallengingUserInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutChallengingUserInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutChallengingUserInput!]
}

input ChallengeUpdateManyWithoutGroupInput {
  create: [ChallengeCreateWithoutGroupInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutGroupInput!]
}

input ChallengeUpdateManyWithoutWinnerInput {
  create: [ChallengeCreateWithoutWinnerInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutWinnerInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutWinnerInput!]
}

input ChallengeUpdateWithoutChallengedUserDataInput {
  description: String
  duration: DateTime
  startTime: DateTime
  finishedTime: DateTime
  active: Boolean
  group: ChallengeGroupUpdateOneWithoutChallengesInput
  challengingUser: UserUpdateOneWithoutChallengerInput
  winner: UserUpdateOneWithoutWinnerInput
}

input ChallengeUpdateWithoutChallengingUserDataInput {
  description: String
  duration: DateTime
  startTime: DateTime
  finishedTime: DateTime
  active: Boolean
  group: ChallengeGroupUpdateOneWithoutChallengesInput
  challengedUser: UserUpdateOneWithoutChallengeeInput
  winner: UserUpdateOneWithoutWinnerInput
}

input ChallengeUpdateWithoutGroupDataInput {
  description: String
  duration: DateTime
  startTime: DateTime
  finishedTime: DateTime
  active: Boolean
  challengingUser: UserUpdateOneWithoutChallengerInput
  challengedUser: UserUpdateOneWithoutChallengeeInput
  winner: UserUpdateOneWithoutWinnerInput
}

input ChallengeUpdateWithoutWinnerDataInput {
  description: String
  duration: DateTime
  startTime: DateTime
  finishedTime: DateTime
  active: Boolean
  group: ChallengeGroupUpdateOneWithoutChallengesInput
  challengingUser: UserUpdateOneWithoutChallengerInput
  challengedUser: UserUpdateOneWithoutChallengeeInput
}

input ChallengeUpdateWithWhereUniqueWithoutChallengedUserInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutChallengedUserDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutChallengingUserInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutChallengingUserDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutGroupInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutGroupDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutWinnerInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutWinnerDataInput!
}

input ChallengeUpsertWithWhereUniqueWithoutChallengedUserInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutChallengedUserDataInput!
  create: ChallengeCreateWithoutChallengedUserInput!
}

input ChallengeUpsertWithWhereUniqueWithoutChallengingUserInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutChallengingUserDataInput!
  create: ChallengeCreateWithoutChallengingUserInput!
}

input ChallengeUpsertWithWhereUniqueWithoutGroupInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutGroupDataInput!
  create: ChallengeCreateWithoutGroupInput!
}

input ChallengeUpsertWithWhereUniqueWithoutWinnerInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutWinnerDataInput!
  create: ChallengeCreateWithoutWinnerInput!
}

input ChallengeWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  duration: DateTime

  """All values that are not equal to given value."""
  duration_not: DateTime

  """All values that are contained in given list."""
  duration_in: [DateTime!]

  """All values that are not contained in given list."""
  duration_not_in: [DateTime!]

  """All values less than the given value."""
  duration_lt: DateTime

  """All values less than or equal the given value."""
  duration_lte: DateTime

  """All values greater than the given value."""
  duration_gt: DateTime

  """All values greater than or equal the given value."""
  duration_gte: DateTime
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  finishedTime: DateTime

  """All values that are not equal to given value."""
  finishedTime_not: DateTime

  """All values that are contained in given list."""
  finishedTime_in: [DateTime!]

  """All values that are not contained in given list."""
  finishedTime_not_in: [DateTime!]

  """All values less than the given value."""
  finishedTime_lt: DateTime

  """All values less than or equal the given value."""
  finishedTime_lte: DateTime

  """All values greater than the given value."""
  finishedTime_gt: DateTime

  """All values greater than or equal the given value."""
  finishedTime_gte: DateTime
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  group: ChallengeGroupWhereInput
  challengingUser: UserWhereInput
  challengedUser: UserWhereInput
  winner: UserWhereInput
}

input ChallengeWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createChallengeGroup(data: ChallengeGroupCreateInput!): ChallengeGroup!
  createChallenge(data: ChallengeCreateInput!): Challenge!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateChallengeGroup(data: ChallengeGroupUpdateInput!, where: ChallengeGroupWhereUniqueInput!): ChallengeGroup
  updateChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  deleteUser(where: UserWhereUniqueInput!): User
  deleteChallengeGroup(where: ChallengeGroupWhereUniqueInput!): ChallengeGroup
  deleteChallenge(where: ChallengeWhereUniqueInput!): Challenge
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertChallengeGroup(where: ChallengeGroupWhereUniqueInput!, create: ChallengeGroupCreateInput!, update: ChallengeGroupUpdateInput!): ChallengeGroup!
  upsertChallenge(where: ChallengeWhereUniqueInput!, create: ChallengeCreateInput!, update: ChallengeUpdateInput!): Challenge!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyChallengeGroups(data: ChallengeGroupUpdateInput!, where: ChallengeGroupWhereInput): BatchPayload!
  updateManyChallenges(data: ChallengeUpdateInput!, where: ChallengeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyChallengeGroups(where: ChallengeGroupWhereInput): BatchPayload!
  deleteManyChallenges(where: ChallengeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  challengeGroups(where: ChallengeGroupWhereInput, orderBy: ChallengeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeGroup]!
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge]!
  user(where: UserWhereUniqueInput!): User
  challengeGroup(where: ChallengeGroupWhereUniqueInput!): ChallengeGroup
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  challengeGroupsConnection(where: ChallengeGroupWhereInput, orderBy: ChallengeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeGroupConnection!
  challengesConnection(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  challengeGroup(where: ChallengeGroupSubscriptionWhereInput): ChallengeGroupSubscriptionPayload
  challenge(where: ChallengeSubscriptionWhereInput): ChallengeSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  facebookId: String
  numTimesChallenged: Int!
  numTimesWon: Int!
  challengeGroups(where: ChallengeGroupWhereInput, orderBy: ChallengeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeGroup!]
  challenger(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  challengee(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  winner(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challengeGroups: ChallengeGroupCreateManyWithoutUsersInput
  challenger: ChallengeCreateManyWithoutChallengingUserInput
  challengee: ChallengeCreateManyWithoutChallengedUserInput
  winner: ChallengeCreateManyWithoutWinnerInput
}

input UserCreateManyWithoutChallengeGroupsInput {
  create: [UserCreateWithoutChallengeGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutChallengeeInput {
  create: UserCreateWithoutChallengeeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengerInput {
  create: UserCreateWithoutChallengerInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWinnerInput {
  create: UserCreateWithoutWinnerInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChallengeeInput {
  name: String!
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challengeGroups: ChallengeGroupCreateManyWithoutUsersInput
  challenger: ChallengeCreateManyWithoutChallengingUserInput
  winner: ChallengeCreateManyWithoutWinnerInput
}

input UserCreateWithoutChallengeGroupsInput {
  name: String!
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challenger: ChallengeCreateManyWithoutChallengingUserInput
  challengee: ChallengeCreateManyWithoutChallengedUserInput
  winner: ChallengeCreateManyWithoutWinnerInput
}

input UserCreateWithoutChallengerInput {
  name: String!
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challengeGroups: ChallengeGroupCreateManyWithoutUsersInput
  challengee: ChallengeCreateManyWithoutChallengedUserInput
  winner: ChallengeCreateManyWithoutWinnerInput
}

input UserCreateWithoutWinnerInput {
  name: String!
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challengeGroups: ChallengeGroupCreateManyWithoutUsersInput
  challenger: ChallengeCreateManyWithoutChallengingUserInput
  challengee: ChallengeCreateManyWithoutChallengedUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  facebookId_ASC
  facebookId_DESC
  numTimesChallenged_ASC
  numTimesChallenged_DESC
  numTimesWon_ASC
  numTimesWon_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  facebookId: String
  numTimesChallenged: Int!
  numTimesWon: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challengeGroups: ChallengeGroupUpdateManyWithoutUsersInput
  challenger: ChallengeUpdateManyWithoutChallengingUserInput
  challengee: ChallengeUpdateManyWithoutChallengedUserInput
  winner: ChallengeUpdateManyWithoutWinnerInput
}

input UserUpdateManyWithoutChallengeGroupsInput {
  create: [UserCreateWithoutChallengeGroupsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutChallengeGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutChallengeGroupsInput!]
}

input UserUpdateOneWithoutChallengeeInput {
  create: UserCreateWithoutChallengeeInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutChallengeeDataInput
  upsert: UserUpsertWithoutChallengeeInput
}

input UserUpdateOneWithoutChallengerInput {
  create: UserCreateWithoutChallengerInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutChallengerDataInput
  upsert: UserUpsertWithoutChallengerInput
}

input UserUpdateOneWithoutWinnerInput {
  create: UserCreateWithoutWinnerInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutWinnerDataInput
  upsert: UserUpsertWithoutWinnerInput
}

input UserUpdateWithoutChallengeeDataInput {
  name: String
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challengeGroups: ChallengeGroupUpdateManyWithoutUsersInput
  challenger: ChallengeUpdateManyWithoutChallengingUserInput
  winner: ChallengeUpdateManyWithoutWinnerInput
}

input UserUpdateWithoutChallengeGroupsDataInput {
  name: String
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challenger: ChallengeUpdateManyWithoutChallengingUserInput
  challengee: ChallengeUpdateManyWithoutChallengedUserInput
  winner: ChallengeUpdateManyWithoutWinnerInput
}

input UserUpdateWithoutChallengerDataInput {
  name: String
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challengeGroups: ChallengeGroupUpdateManyWithoutUsersInput
  challengee: ChallengeUpdateManyWithoutChallengedUserInput
  winner: ChallengeUpdateManyWithoutWinnerInput
}

input UserUpdateWithoutWinnerDataInput {
  name: String
  facebookId: String
  numTimesChallenged: Int
  numTimesWon: Int
  challengeGroups: ChallengeGroupUpdateManyWithoutUsersInput
  challenger: ChallengeUpdateManyWithoutChallengingUserInput
  challengee: ChallengeUpdateManyWithoutChallengedUserInput
}

input UserUpdateWithWhereUniqueWithoutChallengeGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChallengeGroupsDataInput!
}

input UserUpsertWithoutChallengeeInput {
  update: UserUpdateWithoutChallengeeDataInput!
  create: UserCreateWithoutChallengeeInput!
}

input UserUpsertWithoutChallengerInput {
  update: UserUpdateWithoutChallengerDataInput!
  create: UserCreateWithoutChallengerInput!
}

input UserUpsertWithoutWinnerInput {
  update: UserUpdateWithoutWinnerDataInput!
  create: UserCreateWithoutWinnerInput!
}

input UserUpsertWithWhereUniqueWithoutChallengeGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChallengeGroupsDataInput!
  create: UserCreateWithoutChallengeGroupsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  facebookId: String

  """All values that are not equal to given value."""
  facebookId_not: String

  """All values that are contained in given list."""
  facebookId_in: [String!]

  """All values that are not contained in given list."""
  facebookId_not_in: [String!]

  """All values less than the given value."""
  facebookId_lt: String

  """All values less than or equal the given value."""
  facebookId_lte: String

  """All values greater than the given value."""
  facebookId_gt: String

  """All values greater than or equal the given value."""
  facebookId_gte: String

  """All values containing the given string."""
  facebookId_contains: String

  """All values not containing the given string."""
  facebookId_not_contains: String

  """All values starting with the given string."""
  facebookId_starts_with: String

  """All values not starting with the given string."""
  facebookId_not_starts_with: String

  """All values ending with the given string."""
  facebookId_ends_with: String

  """All values not ending with the given string."""
  facebookId_not_ends_with: String
  numTimesChallenged: Int

  """All values that are not equal to given value."""
  numTimesChallenged_not: Int

  """All values that are contained in given list."""
  numTimesChallenged_in: [Int!]

  """All values that are not contained in given list."""
  numTimesChallenged_not_in: [Int!]

  """All values less than the given value."""
  numTimesChallenged_lt: Int

  """All values less than or equal the given value."""
  numTimesChallenged_lte: Int

  """All values greater than the given value."""
  numTimesChallenged_gt: Int

  """All values greater than or equal the given value."""
  numTimesChallenged_gte: Int
  numTimesWon: Int

  """All values that are not equal to given value."""
  numTimesWon_not: Int

  """All values that are contained in given list."""
  numTimesWon_in: [Int!]

  """All values that are not contained in given list."""
  numTimesWon_not_in: [Int!]

  """All values less than the given value."""
  numTimesWon_lt: Int

  """All values less than or equal the given value."""
  numTimesWon_lte: Int

  """All values greater than the given value."""
  numTimesWon_gt: Int

  """All values greater than or equal the given value."""
  numTimesWon_gte: Int
  challengeGroups_every: ChallengeGroupWhereInput
  challengeGroups_some: ChallengeGroupWhereInput
  challengeGroups_none: ChallengeGroupWhereInput
  challenger_every: ChallengeWhereInput
  challenger_some: ChallengeWhereInput
  challenger_none: ChallengeWhereInput
  challengee_every: ChallengeWhereInput
  challengee_some: ChallengeWhereInput
  challengee_none: ChallengeWhereInput
  winner_every: ChallengeWhereInput
  winner_some: ChallengeWhereInput
  winner_none: ChallengeWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
